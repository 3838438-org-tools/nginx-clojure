
#you can uncomment next two lines for easy debug
daemon  off;
master_process  off;

#user  nobody;
#you can set worker_processes =1 for easy debug
#if master_process is off, the count of worker processes will be 1 regardless of worker_processes settings
worker_processes  8;


error_log   logs/error.log;
#error_log   logs/error.log  debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1000;
    #debug_connection 127.0.0.1;
    multi_accept on;
}


http {

    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #coroutine agent
    jvm_options "-javaagent:/home/who/git/nginx-clojure/target/nginx-clojure-0.2.0.jar=mb";
    jvm_options "-Xbootclasspath/a:/home/who/git/nginx-clojure/target/nginx-clojure-0.2.0.jar:/home/who/.m2/repository/org/clojure/clojure/1.5.1/clojure-1.5.1.jar:/home/who/git/nginx-clojure/test/nginx-working-dir/coroutine-udfs";
    jvm_options "-Dnginx.clojure.logger.level=info";
    
    jvm_options "-Dnginx.clojure.wave.udfs=compojure-http-clj.txt";
    jvm_options "-Dnginx.clojure.wave.trace.classmethodpattern=org.apache.http.impl.client.DefaultRequestDirector.*";
    jvm_options "-Dnginx.clojure.wave.trace.classpattern=org.apache.http.impl.client.DefaultRequestDirector.*";

    #including ring-core & compojure for test
    #jvm_options "-Djava.class.path=/home/who/.m2/repository/org/clojure/clojure/1.5.1/clojure-1.5.1.jar:/home/who/git/nginx-clojure/bin:/home/who/.m2/repository/ring/ring-codec/1.0.0/ring-codec-1.0.0.jar:/home/who/.m2/repository/clout/clout/1.1.0/clout-1.1.0.jar:/home/who/.m2/repository/org/clojure/tools.reader/0.7.3/tools.reader-0.7.3.jar:/home/who/.m2/repository/org/clojure/core.incubator/0.1.0/core.incubator-0.1.0.jar:/home/who/.m2/repository/ring/ring-core/1.2.1/ring-core-1.2.1.jar:/home/who/.m2/repository/org/clojure/tools.macro/0.1.0/tools.macro-0.1.0.jar:/home/who/.m2/repository/clj-time/clj-time/0.4.4/clj-time-0.4.4.jar:/home/who/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:/home/who/.m2/repository/org/clojure/clojure/1.5.1/clojure-1.5.1.jar:/home/who/.m2/repository/commons-codec/commons-codec/1.6/commons-codec-1.6.jar:/home/who/.m2/repository/joda-time/joda-time/2.1/joda-time-2.1.jar:/home/who/.m2/repository/compojure/compojure/1.1.6/compojure-1.1.6.jar:/home/who/.m2/repository/org/clojure/tools.nrepl/0.2.3/tools.nrepl-0.2.3.jar:/home/who/.m2/repository/commons-fileupload/commons-fileupload/1.3/commons-fileupload-1.3.jar:/home/who/.m2/repository/clojure-complete/clojure-complete/0.2.3/clojure-complete-0.2.3.jar";
    jvm_options "-Djava.class.path=/home/who/.m2/repository/org/clojure/clojure/1.5.1/clojure-1.5.1.jar:/home/who/git/nginx-clojure/bin:/home/who/.m2/repository/org/apache/httpcomponents/httpclient/4.3.1/httpclient-4.3.1.jar:/home/who/.m2/repository/cheshire/cheshire/5.2.0/cheshire-5.2.0.jar:/home/who/.m2/repository/slingshot/slingshot/0.10.3/slingshot-0.10.3.jar:/home/who/.m2/repository/ring/ring-codec/1.0.0/ring-codec-1.0.0.jar:/home/who/.m2/repository/clout/clout/1.1.0/clout-1.1.0.jar:/home/who/.m2/repository/org/clojure/tools.reader/0.7.3/tools.reader-0.7.3.jar:/home/who/.m2/repository/org/clojure/core.incubator/0.1.0/core.incubator-0.1.0.jar:/home/who/.m2/repository/com/fasterxml/jackson/dataformat/jackson-dataformat-smile/2.2.1/jackson-dataformat-smile-2.2.1.jar:/home/who/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.2.1/jackson-core-2.2.1.jar:/home/who/.m2/repository/ring/ring-core/1.2.1/ring-core-1.2.1.jar:/home/who/.m2/repository/commons-logging/commons-logging/1.1.3/commons-logging-1.1.3.jar:/home/who/.m2/repository/org/clojure/tools.macro/0.1.0/tools.macro-0.1.0.jar:/home/who/.m2/repository/commons-codec/commons-codec/1.8/commons-codec-1.8.jar:/home/who/.m2/repository/crouton/crouton/0.1.1/crouton-0.1.1.jar:/home/who/.m2/repository/clj-time/clj-time/0.4.4/clj-time-0.4.4.jar:/home/who/.m2/repository/org/clojure/tools.nrepl/0.2.3/tools.nrepl-0.2.3.jar:/home/who/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:/home/who/.m2/repository/clj-http/clj-http/0.7.8/clj-http-0.7.8.jar:/home/who/.m2/repository/org/apache/httpcomponents/httpmime/4.3.1/httpmime-4.3.1.jar:/home/who/.m2/repository/org/hamcrest/hamcrest-core/1.1/hamcrest-core-1.1.jar:/home/who/.m2/repository/org/clojure/clojure/1.5.1/clojure-1.5.1.jar:/home/who/.m2/repository/org/jsoup/jsoup/1.7.1/jsoup-1.7.1.jar:/home/who/.m2/repository/clojure-complete/clojure-complete/0.2.3/clojure-complete-0.2.3.jar:/home/who/.m2/repository/tigris/tigris/0.1.1/tigris-0.1.1.jar:/home/who/.m2/repository/joda-time/joda-time/2.1/joda-time-2.1.jar:/home/who/.m2/repository/compojure/compojure/1.1.6/compojure-1.1.6.jar:/home/who/.m2/repository/commons-fileupload/commons-fileupload/1.3/commons-fileupload-1.3.jar:/home/who/.m2/repository/org/apache/httpcomponents/httpcore/4.3/httpcore-4.3.jar";
    
    
    #for engble java remote debug uncomment next two lines
     jvm_options "-Xdebug";
     jvm_options "-Xrunjdwp:server=y,transport=dt_socket,address=8400,suspend=n";
    #jvm_options "-XX:+UseSerialGC";
    
     #jvm_options "-Xms256m";
     #jvm_options "-Xmx256m";
    
     jvm_path "/usr/lib/jvm/java-7-oracle/jre/lib/amd64/server/libjvm.so";
     
     #If jvm_workers is not defined, neither coroutine nor thread pool is used
     #If jvm_workers = 0 it'll use coroutine to handle every request, but you must set class waving configurations
     #If jvm_workers > 0 it is threads number for request handler thread pool on jvm. 
     #If jvm_workers < -1, this equals the case where jvm_workers is not defined
     jvm_workers 0;
     
    server {
        listen       8080;
        server_name  localhost;
       
       #uncomment this two lines for performance test 
       access_log off;
	     #error_log /dev/null crit;

         location / {
          clojure;
        	clojure_code ' (let [text (slurp "/home/who/git/clojure-web-server-benchmarks/servers/index.html")]
                                     (fn[req]
        						  									{:status 200 :headers {"content-type" "text/html"}
                                         :body text})
                                  )
        						
                  ';
         }

       location /clojure {
          clojure;
          clojure_code ' 
						(fn[req]
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  "Hello Clojure & Nginx!" 
						    })
          ';
       }
       
       location /headers {
          clojure;
          clojure_code ' 
						(fn[req]
						(let [headers (:headers req)]
						  (require \'clojure.string)
						  {
						    :status 200,
						    :headers {"content-type" "text/plain", "my-header" (headers "my-header"), "etag" "e29b7ffb8a5325de60aed2d46a9d150b", "cache-control" ["no-store" "no-cache"]},
						    :body 
						   					 (pr-str {:user-agent (headers "user-agent")
						           	  :my-header (headers "my-header")
						           	  :server-port (:server-port req)
						           	  :server-name (:server-name req)
						           	  :remote-addr (:remote-addr req)
						           	  :uri (:uri req)
						           	  :query-string (:query-string req)
						           	  :scheme (:scheme req)
						           	  :content-type (:content-type req)
						           	  :character-encoding (:character-encoding req)
						           	  :cookie (headers "cookie")
						           	  ;
						           	  ;"slow header seq: " (clojure.string/join (for [[k v] headers] (str k ":" v ","))) "\\n"
						           	  }
						            ) 
						    }))
          ';
       }
       
       location /loweruppercaseheaders {
          clojure;
          clojure_code ' 
						(fn[req]
						(let [headers (:headers req)]
						  (require \'clojure.string)
						  {
						    :status 200,
						    :headers {"Content-Type" "text/plain", "my-header" (headers "My-header"), "Etag" "e29b7ffb8a5325de60aed2d46a9d150b", "Cache-Control" ["no-store" "no-cache"]},
						    :body 
						   					 (pr-str {:user-agent (headers "user-agent")
						           	  :my-header (headers "my-header")
						           	  :server-port (:server-port req)
						           	  :server-name (:server-name req)
						           	  :remote-addr (:remote-addr req)
						           	  :uri (:uri req)
						           	  :query-string (:query-string req)
						           	  :scheme (:scheme req)
						           	  :content-type (:content-type req)
						           	  :character-encoding (:character-encoding req)
						           	  :cookie (headers "cookie")
						           	  :all-headers (clojure.string/join (for [[k v] headers] (str k ":" v ",")))
						           	  }
						            ) 
						    }))
          ';
       }
       
       location /form {
          clojure;
          clojure_code ' 
						(fn[req]
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  (let [headers (:headers req), req-body (:body req)]
						   					 (pr-str {:user-agent (headers "user-agent")
						           	  :server-port (:server-port req)
						           	  :server-name (:server-name req)
						           	  :remote-addr (:remote-addr req)
						           	  :uri (:uri req)
						           	  :query-string (:query-string req)
						           	  :scheme (:scheme req)
						           	  :content-type (:content-type req)
						           	  :character-encoding (:character-encoding req)
						           	  :form-body-type (if req-body (-> req-body .getClass .getName))
						           	  :form-body-str (if req-body (slurp req-body))}
						            ))
						    })
          ';
       }
       
       location /files {
       	 gzip on;
	       gzip_http_version 1.0;
	       gzip_disable "MSIE [1-6].";
	       gzip_types  text/plain;
         clojure;
         clojure_code '
         (do 
					  (require \'[clojure.java.io :as io])
					  (fn [req]
					    (let [uri (:uri req), fpath (str "testfiles" (subs uri (-> "/files" count)))]
					      ;(println "from clojure:" (.getCanonicalPath (io/file fpath)))
					      {:status 200, :headers {};{"content-type"  "text/plain"}, 
					       :body (io/file fpath)}))
					  )
           ';
       }
       
       location /echoUploadfile {
         clojure;
         clojure_code '
         (do 
					  (fn [req]
					      {:status 200, :body (slurp (:body req))})
					  )
           ';
       }
       
       location /testMySeq{
       	 gzip on;
	       gzip_http_version 1.0;
	       gzip_disable "MSIE [1-6].";
	       gzip_types  text/plain;
         clojure;
         clojure_code '
         (do 
					  (require \'[clojure.java.io :as io])
					  (fn [req]
					    {:status 200, :headers {"content-type"  "text/plain"}, :body (list "header line\n" (io/file "testfiles/small.html"))})
					 )
           ';
       }
       
       location /testInputStream {
       	 gzip on;
	       gzip_http_version 1.0;
	       gzip_disable "MSIE [1-6].";
	       gzip_types  text/plain;
         clojure;
         clojure_code '
         (do 
					  (require \'[clojure.java.io :as io])
					  (fn [req]
					    ;do not use FileInputStream, please use File instead.
					    {:status 200, :headers {"content-type"  "text/plain"},:body (java.io.FileInputStream. "testfiles/small.html")})
					 )
           ';
       }
       
       location /testRedirect{
         clojure;
          clojure_code ' 
						(fn[req]
						  {:status 302
                                            ;:test (println req)
						   :headers {"Location" "/files/small.html"}
						   :body ""})
          ';      
       }
       
       location /ringCompojure {
         clojure;
         clojure_code '
           (do
             (use \'[compojure.core])
             (use \'[nginx.clojure.ring-handlers-for-test])
             (context "/ringCompojure" [] ring-compojure-test-handler)
           )
         ';
       }
       
       location /asyncsocket {
          clojure;
          clojure_code ' 
               (do (import \'[nginx.clojure.net SimpleHandler4TestNginxClojureAsynSocket]) (SimpleHandler4TestNginxClojureAsynSocket.) )
          ';
       }
       
      location /socket {
          clojure;
          clojure_code ' 
               (do (import \'[nginx.clojure.net SimpleHandler4TestNginxClojureSocket]) (SimpleHandler4TestNginxClojureSocket.) )
          ';
       }
       
       #test not passed!!!! for context marco
       location /coroutineSocketAndCompojure {
         clojure;
         clojure_code '
           (do
             (use \'[compojure.core])
             (use \'[nginx.clojure.coroutine-socket-handlers-for-test])
             (context "/coroutineSocketAndCompojure" [] coroutine-socket-test-handler)
           )
         ';
       }
       
       #test passed
       location ~ ^/simple.* {
         clojure;
         clojure_code '
           (do
             (use \'[compojure.core])
             (use \'[nginx.clojure.coroutine-socket-handlers-for-test])
             coroutine-socket-test-handler
           )
         ';
       }
      

      #passed 
      location /httpclientget {
         clojure;
          clojure_code ' 
               (do (import \'[nginx.clojure.net SimpleHandler4TestHttpClientGetMethod]) (SimpleHandler4TestHttpClientGetMethod.) )
          ';
       }       
       #native nginx static file service for performance comparing
       location /ntestfile {
          alias "testfiles";
       }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}
