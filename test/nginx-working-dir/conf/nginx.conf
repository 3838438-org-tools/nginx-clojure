daemon  off;
#you can uncomment next line for easy debug
#master_process  off;

#user  nobody;
#you can set worker_processes =1 for easy debug
worker_processes  4;


error_log   logs/error.log;
#error_log   logs/error.log  debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    default_type  application/octet-stream;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    jvm_options "-Djava.class.path=/home/who/.m2/repository/org/clojure/clojure/1.5.1/clojure-1.5.1.jar:/home/who/git/nginx-clojure/bin";
    #for engble java remote debug uncomment next two lines
    #jvm_options "-Xdebug";
    #jvm_options "-Xrunjdwp:server=y,transport=dt_socket,address=8400,suspend=n";
    jvm_path "/usr/lib/jvm/java-7-oracle/jre/lib/amd64/server/libjvm.so";


    server {
        listen       8080;
        server_name  localhost;
       
       #uncomment this two lines for performance test 
       #access_log off;
	   #error_log off;
       location /clojure {
          clojure;
          clojure_code ' 
						(fn[req]
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  "Hello Clojure & Nginx!" 
						    })
          ';
       }
       
       location /headers {
          clojure;
          clojure_code ' 
						(fn[req]
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  (let [headers (:headers req)]
						   					 (str "user-agent:" (get headers "user-agent")
						           	  "\n"
						           	  "my-header:" (get headers "my-header")
						           	  "\n"
						            ) )
						    })
          ';
       }
       
       location /src {
         clojure;
         clojure_code '
         (do 
					  (require \'[clojure.java.io :as io])
					  (fn [req]
					    (let [uri (:uri req), fpath (str "../.." uri)]
					      ;(println (.getCanonicalPath (io/file fpath)))
					      {:status 200, :headers {"content-type"  "text/plain"}, :body (io/file fpath)}))
					  )
           ';
       }
       
       #native nginx static file service for performance comparing
       location /crc {
          alias "../../nginx-clojure/src";
       }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}
