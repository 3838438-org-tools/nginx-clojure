
#you can uncomment next two lines for easy debug
daemon  off;
master_process  off;

#user  nobody;
#you can set worker_processes =1 for easy debug
worker_processes  8;


error_log   logs/error.log;
#error_log   logs/error.log  debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  40;
    #debug_connection 127.0.0.1;
}


http {

    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    jvm_options "-Djava.class.path=/home/who/.m2/repository/org/clojure/clojure/1.5.1/clojure-1.5.1.jar:/home/who/git/nginx-clojure/bin";
    
    
    
    #for engble java remote debug uncomment next two lines
    #jvm_options "-Xdebug";
    #jvm_options "-Xrunjdwp:server=y,transport=dt_socket,address=8400,suspend=n";
    #jvm_options "-XX:+UseSerialGC";
    
    
     jvm_path "/usr/lib/jvm/java-7-oracle/jre/lib/amd64/server/libjvm.so";
     
     #threads number for request handler thread pool on jvm, default is 0. 
     #ONLY IF you cann't resolve your performance problem by increasing worker_processes or reducing single request-response time, you can consider the way.
     #jvm_workers 8;
     
    server {
        listen       8080;
        server_name  localhost;
       
       #uncomment this two lines for performance test 
       #access_log off;
	     #error_log /dev/null crit;
       location /clojure {
          clojure;
          clojure_code ' 
						(fn[req]
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  "Hello Clojure & Nginx!" 
						    })
          ';
       }
       
       location /headers {
          clojure;
          clojure_code ' 
						(fn[req]
						(let [headers (:headers req)]
						  (require \'clojure.string)
						  {
						    :status 200,
						    :headers {"content-type" "text/plain", "my-header" (headers "my-header"), "etag" "e29b7ffb8a5325de60aed2d46a9d150b", "cache-control" ["no-store" "no-cache"]},
						    :body 
						   					 (pr-str {:user-agent (headers "user-agent")
						           	  :my-header (headers "my-header")
						           	  :server-port (:server-port req)
						           	  :server-name (:server-name req)
						           	  :remote-addr (:remote-addr req)
						           	  :uri (:uri req)
						           	  :query-string (:query-string req)
						           	  :scheme (:scheme req)
						           	  :content-type (:content-type req)
						           	  :character-encoding (:character-encoding req)
						           	  :cookie (headers "cookie")
						           	  ;
						           	  ;"slow header seq: " (clojure.string/join (for [[k v] headers] (str k ":" v ","))) "\\n"
						           	  }
						            ) 
						    }))
          ';
       }
       
       location /form {
          clojure;
          clojure_code ' 
						(fn[req]
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  (let [headers (:headers req), req-body (:body req)]
						   					 (pr-str {:user-agent (headers "user-agent")
						           	  :server-port (:server-port req)
						           	  :server-name (:server-name req)
						           	  :remote-addr (:remote-addr req)
						           	  :uri (:uri req)
						           	  :query-string (:query-string req)
						           	  :scheme (:scheme req)
						           	  :content-type (:content-type req)
						           	  :character-encoding (:character-encoding req)
						           	  :form-body-type (if req-body (-> req-body .getClass .getName))
						           	  :form-body-str (if req-body (slurp req-body))}
						            ))
						    })
          ';
       }
       
       location /testfiles {
       	 gzip on;
	       gzip_http_version 1.0;
	       gzip_disable "MSIE [1-6].";
	       gzip_types  text/plain;
         clojure;
         clojure_code '
         (do 
					  (require \'[clojure.java.io :as io])
					  (fn [req]
					    (let [uri (:uri req), fpath (str "testfiles" (subs uri (-> "/testfiles" count)))]
					      ;(println "from clojure:" (.getCanonicalPath (io/file fpath)))
					      {:status 200, :headers {};{"content-type"  "text/plain"}, 
					       :body (io/file fpath)}))
					  )
           ';
       }
       
       location /echoUploadfile {
         clojure;
         clojure_code '
         (do 
					  (fn [req]
					      {:status 200, :body (slurp (:body req))})
					  )
           ';
       }
       
       #native nginx static file service for performance comparing
       location /ntestfile {
          alias "testfiles";
       }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}
