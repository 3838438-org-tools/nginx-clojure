#you can uncomment next line for easy debug
daemon  off;
#you can uncomment next line for easy debug
master_process  off;

#user  nobody;
#you can set worker_processes =1 for easy debug
worker_processes  8;


#error_log   logs/error.log;
error_log   logs/error.log  debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {

    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #win32
    jvm_options "-Djava.class.path=Y:/nginx-clojure/target/nginx-clojure-0.1.0-SNAPSHOT-standalone.jar";
    

    #for engble java remote debug uncomment next two lines
    #jvm_options "-Xdebug";
    #jvm_options "-Xrunjdwp:server=y,transport=dt_socket,address=8400,suspend=n";
    #jvm_options "-XX:+UseSerialGC";
    
    #win32
    jvm_path "C:/Program Files/Java/jdk1.7.0_25/jre/bin/server/jvm.dll";
    

    server {
        listen       8080;
        server_name  localhost;
       
       #uncomment this two lines for performance test 
       #access_log off;
	     #error_log off;
       location /clojure {
          clojure;
          clojure_code ' 
						(fn[req]
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  "Hello Clojure & Nginx!" 
						    })
          ';
       }
       
       location /headers {
          clojure;
          clojure_code ' 
						(fn[req]
						  (require \'clojure.string)
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  (let [headers (:headers req)]
						   					 (str "user-agent:" (headers "user-agent") "\\n"
						           	  "my-header:" (headers "my-header") "\\n"
						           	  "server-port:" (:server-port req) "\\n"
						           	  "server-name:" (:server-name req) "\\n"
						           	  "remote-addr:" (:remote-addr req) "\\n"
						           	  "uri:" (:uri req) "\\n"
						           	  "query-string:" (:query-string req) "\\n"
						           	  "scheme:" (:scheme req) "\\n"
						           	  "content-type:" (:content-type req) "\\n"
						           	  "character-encoding:" (:character-encoding req) "\\n"
						           	  "cookie:" (headers "cookie") "\\n"
						           	  ;
						           	  ;"slow header seq: " (clojure.string/join (for [[k v] headers] (str k ":" v ","))) "\\n"
						           	  ;
						            ) )
						    })
          ';
       }
       
       location /form {
          clojure;
          clojure_code ' 
						(fn[req]
						  {
						    :status 200,
						    :headers {"content-type" "text/plain"},
						    :body  (let [headers (:headers req)]
						   					 (str "user-agent:" (headers "user-agent") "\\n"
						           	  "server-port:" (:server-port req) "\\n"
						           	  "server-name:" (:server-name req) "\\n"
						           	  "remote-addr:" (:remote-addr req) "\\n"
						           	  "uri:" (:uri req) "\\n"
						           	  "query-string:" (:query-string req) "\\n"
						           	  "scheme:" (:scheme req) "\\n"
						           	  "content-type:" (:content-type req) "\\n"
						           	  "character-encoding:" (:character-encoding req) "\\n"
						           	  "form-body:" (:body req) "\\n"
						            ) )
						    })
          ';
       }
       
       location /src {
       	  gzip on;
	        gzip_http_version 1.0;
	        gzip_disable "MSIE [1-6].";
	        gzip_types  text/plain;
         clojure;
         clojure_code '
         (do 
					  (require \'[clojure.java.io :as io])
					  (fn [req]
					    (let [uri (:uri req), fpath (str "Y:/nginx-clojure" uri)]
					      ;(println (.getCanonicalPath (io/file fpath)))
					      {:status 200, :headers {};{"content-type"  "text/plain"}, 
					       :body (io/file fpath)}))
					  )
           ';
       }
       
       location /echoUploadfile {
         clojure;
         clojure_code '
         (do 
					  (fn [req]
					      {:status 200, :body (slurp (:body req))})
					  )
           ';
       }
       
       #native nginx static file service for performance comparing
       location /crc {
          alias "Y:/nginx-clojure/src";
       }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}
